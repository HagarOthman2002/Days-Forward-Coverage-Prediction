# -*- coding: utf-8 -*-
"""Days-Forward-Coverage-Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NLdPpsoM14MwVN7hPynELOuKi1_ngYNa

#Generate Toy Forecast Dataset

import libraries
"""

import pandas as pd
import numpy as np

def generate_forecast_data(num_products=1000, num_days=31):
    products = np.arange(1, num_products+1)  # Generate product IDs
    dates = pd.date_range(start="2024-08-01", periods=num_days) # Generate Dates
    data = []

    for product in products:
        for day in dates:
            forecasted_sales = np.random.randint(1, 100)   # Generate forecasted_sales
            data.append([product, day, forecasted_sales])

    return pd.DataFrame(data, columns=["PRODUCT ID", "DATE", "FORECASTED SALES"]), products

# Generate forecast dataset and product IDs
forecast_df, product_ids = generate_forecast_data()
forecast_df.head()

# forecast_df_to_csv = forecast_df.to_csv('forecast_df.csv', index=False)

"""#Generate Inventory Dataset"""

def generate_inventory_data(product_ids, num_batches=5):
    data = []

    for product in product_ids:
        for batch in range(1, num_batches+1):
            expiry_date = np.random.choice(pd.date_range("2024-08-01", "2024-08-31"))
            inventory = np.random.randint(1, 50)  # Random inventory between 1 and 50
            data.append([product, batch, expiry_date, inventory])

    return pd.DataFrame(data, columns=["PRODUCT ID", "BATCH ID", "EXPIRY DATE", "INVENTORY"])

# Generate the inventory dataset using the same product IDs
inventory_df = generate_inventory_data(product_ids)
inventory_df.head()

# inventory_df = inventory_df.to_csv('inventory_df.csv', index=False)

"""#Calculate Days Forward Coverage
 Logic:

   * For each product:
- Sort inventory batches by expiry date.
- Iterate through the forecasted sales data day by day.
- Deduct the daily forecasted sales from the available inventory, respecting expiry dates.
- Calculate how many days the productâ€™s inventory can last.
"""

def calculate_days_forward_coverage(forecast_df, inventory_df):

    coverage = {}

    # Iterate over each product
    for product in forecast_df["PRODUCT ID"].unique():
        # Filter forecast data and inventory data for the current product
        product_forecast = forecast_df[forecast_df["PRODUCT ID"] == product].sort_values(by="DATE")
        product_inventory = inventory_df[inventory_df["PRODUCT ID"] == product].sort_values(by="EXPIRY DATE")

        # Keep track of the total inventory available
        total_inventory = product_inventory["INVENTORY"].sum()
        coverage_days = 0

        # Iterate through forecasted sales day by day
        for index, row in product_forecast.iterrows():
            daily_sales = row["FORECASTED SALES"]  #Extract Sales and Date
            current_date = row["DATE"]

            # Remove expired batches from available inventory
            product_inventory = product_inventory[product_inventory["EXPIRY DATE"] >= current_date]
            total_inventory = product_inventory["INVENTORY"].sum()

            # Deduct the daily sales from total available inventory
            if total_inventory > 0:
                total_inventory -= daily_sales
                coverage_days += 1
            else:
                # Break when inventory is fully depleted
                break

        coverage[product] = coverage_days

    return coverage

# Example usage
coverage = calculate_days_forward_coverage(forecast_df, inventory_df)
print(coverage)

# Convert the dictionary to a Pandas DataFrame
coverage_df = pd.DataFrame(list(coverage.items()), columns=['Product ID', 'Days Forward Coverage'])

# Display the DataFrame in a sorted and more readable format
coverage_df = coverage_df.sort_values(by='Product ID').reset_index(drop=True)
coverage_df.head()

coverage_df_to_csv = coverage_df.to_csv('coverage_df.csv', index=False)

